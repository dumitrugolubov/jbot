import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler, ConversationHandler
)

TOKEN = os.environ.get("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = int(os.environ.get("ADMIN_CHAT_ID", "123456789"))
ASK_NICK, ASK_DISCORD, ASK_SCREEN = range(3)
WALLET = "TVadXnyCDphgsSZY4p9zs3pgNZYufRwp71"

application = Application.builder().token(TOKEN).build()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay")]]
    text = (
        "–¢—Ä–µ–π–¥–∏–Ω–≥ ‚Äî –æ–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞.\n"
        "–ù–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞–µ—Ç –∫ —Ä–∞–∑–≤–∏—Ç–∏—é –∏ –¥–µ–ª–∞–µ—Ç —ç—Ç—É –∏–≥—Ä—É –ø–æ–Ω—è—Ç–Ω–µ–µ.\n\n"
        "*–ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫:*\n"
        "https://teletype.in/@jteam/xJTC\n\n"
        "*–¶–µ–Ω–∞:* 200 USDT (3 –º–µ—Å—è—Ü–∞)\n\n"
        "–ê–∫—Ç—É–∞–ª—å–Ω–æ –¥–æ 1 –∏—é–Ω—è."
    )
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "pay":
        keyboard = [
            [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏–ª", callback_data="paid")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
        ]
        text = (
            "*–†–µ–∫–≤–∏–∑–∏—Ç—ã:*\n\n"
            "USDT (TRC20)\n\n"
            f"`{WALLET}`\n\n"
            "üëâ –ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∞–¥—Ä–µ—Å, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å."
        )
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    elif query.data == "back":
        keyboard = [
            [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay")]
        ]
        text = (
            "–¢—Ä–µ–π–¥–∏–Ω–≥ ‚Äî –æ–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞.\n"
            "–ù–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞–µ—Ç –∫ —Ä–∞–∑–≤–∏—Ç–∏—é –∏ –¥–µ–ª–∞–µ—Ç —ç—Ç—É –∏–≥—Ä—É –ø–æ–Ω—è—Ç–Ω–µ–µ.\n\n"
            "*–ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫:*\n"
            "https://teletype.in/@jteam/xJTC\n\n"
            "*–¶–µ–Ω–∞:* 200 USDT (3 –º–µ—Å—è—Ü–∞)\n\n"
            "–ê–∫—Ç—É–∞–ª—å–Ω–æ –¥–æ 1 –∏—é–Ω—è."
        )
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    elif query.data == "paid":
        await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram –Ω–∏–∫–Ω–µ–π–º:")
        return ASK_NICK

async def ask_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["tg_nick"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Discord –Ω–∏–∫–Ω–µ–π–º:")
    return ASK_DISCORD

async def ask_discord(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["discord_nick"] = update.message.text
    await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã:")
    return ASK_SCREEN

async def ask_screen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        photo_file = await update.message.photo[-1].get_file()
        file_id = photo_file.file_id
        tg_nick = context.user_data.get("tg_nick", "")
        discord_nick = context.user_data.get("discord_nick", "")
        await context.bot.send_photo(
            chat_id=ADMIN_CHAT_ID,
            photo=file_id,
            caption=f"üßë –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂\nTG: {tg_nick}\nDiscord: {discord_nick}"
        )
        final_text = (
            "____\n\n"
            "–ì–æ—Ç–æ–≤–æ!\n\n"
            "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –∑–∞—è–≤–∫—É, –≤—ã —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n"
            "–ü–æ–∫–∞ –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ –ª—É—á—à–µ–≥–æ YouTube –±–ª–æ–≥–µ—Ä–∞ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É:\n"
            "https://youtube.com/@jteamtube\n\n"
            "____"
        )
        await update.message.reply_text(final_text, reply_markup=ReplyKeyboardRemove())
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç.")
        return ASK_SCREEN
    return ConversationHandler.END

conv_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(button, pattern="^paid$")
    ],
    states={
        ASK_NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_nick)],
        ASK_DISCORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_discord)],
        ASK_SCREEN: [MessageHandler(filters.PHOTO, ask_screen)]
    },
    fallbacks=[CommandHandler('cancel', lambda u, c: ConversationHandler.END)],
    allow_reentry=True
)

application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(button))
application.add_handler(conv_handler)

# Vercel serverless function entrypoint
async def handler(request, context):
    body = await request.json()
    update = Update.de_json(body, application.bot)
    await application.process_update(update)
    return {
        "statusCode": 200,
        "body": "ok"
    }
