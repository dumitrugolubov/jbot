import os
from flask import Flask, request
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler, ConversationHandler
)

TOKEN = os.environ.get("TELEGRAM_TOKEN")
ADMIN_CHAT_ID = int(os.environ.get("ADMIN_CHAT_ID", "123456789"))  # –¢–≤–æ–π Telegram ID

ASK_NICK, ASK_DISCORD, ASK_SCREEN = range(3)

app = Flask(__name__)
application = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç?", callback_data="features")],
        [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay")]
    ]
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! JTC | Discord ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "features":
        await query.edit_message_text(
            "üîë –í –ø–æ–¥–ø–∏—Å–∫—É –≤—Ö–æ–¥–∏—Ç: ... (—Ç—É—Ç –æ–ø–∏—à–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∏—á)\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã."
        )
    elif query.data == "pay":
        await query.edit_message_text(
            "üí∏ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —ç—Ç–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º: ...\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏–ª¬ª.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏–ª", callback_data="paid")],
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ])
        )
    elif query.data == "paid":
        await query.edit_message_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram –Ω–∏–∫–Ω–µ–π–º:"
        )
        return ASK_NICK
    elif query.data == "cancel":
        await query.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

async def ask_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["tg_nick"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Discord –Ω–∏–∫–Ω–µ–π–º:")
    return ASK_DISCORD

async def ask_discord(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["discord_nick"] = update.message.text
    await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã:")
    return ASK_SCREEN

async def ask_screen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        photo_file = await update.message.photo[-1].get_file()
        file_id = photo_file.file_id
        tg_nick = context.user_data.get("tg_nick", "")
        discord_nick = context.user_data.get("discord_nick", "")
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É
        await context.bot.send_photo(
            chat_id=ADMIN_CHAT_ID,
            photo=file_id,
            caption=f"üßë –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂\nTG: {tg_nick}\nDiscord: {discord_nick}"
        )
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.", reply_markup=ReplyKeyboardRemove())
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç.")
        return ASK_SCREEN
    return ConversationHandler.END

def setup_bot():
    global application
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(button, pattern="^paid$")
        ],
        states={
            ASK_NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_nick)],
            ASK_DISCORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_discord)],
            ASK_SCREEN: [MessageHandler(filters.PHOTO, ask_screen)]
        },
        fallbacks=[CommandHandler('cancel', lambda u, c: ConversationHandler.END)],
        allow_reentry=True
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(conv_handler)

setup_bot()

@app.route("/api/webhook", methods=["POST"])
def webhook():
    if request.method == "POST":
        update = Update.de_json(request.get_json(force=True), application.bot)
        application.update_queue.put(update)
        return "ok"
    return "fail"

# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å app.run() (–Ω–∞ Vercel –Ω–µ –Ω—É–∂–Ω–æ)
